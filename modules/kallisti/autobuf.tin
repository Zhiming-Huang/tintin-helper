#nop --
#nop Class Definitions
#nop --

#var kallisti/autobuf-description {Handle character bufs automatically}
#var kallisti/autobuf-help {
Under construction.  Needs all on/off switches moved to the coming\n
prefs module.
}

#nop --
#nop Modloader Stuff
#nop --

#alias kallisti/autobuf-register {
	#if {@isloaded{queues}} {
		register_module kallisti/autobuf
	} {
		fail_module kallisti/autobuf Need queues module
	}
}

#tick {auto bufs} {autoBuf} {4}

#var autobuf_delay 15;

#nop -- Preference Management --
init sanctMethod preferences auto;
#foreach {autoguardian;autobark;autostatic;autoaura;autogrim;autodshield} {tmp} {
    init $tmp preferences off;
}

event_register {show preferences} {kallisti/autobuf} {autobuf_preferences};
event_register {set preferences} {kallisti/autobuf} {autobuf_set_preferences}; 

#alias autobuf_preferences {
    #nop %0;
    #if {("%2" == "autobuf") || ("%2" == "")} {
        #showme <afc>Autobuf;
        #format line {<caf>%%10s: <fac>%%10s} {sanctmethod} {$sanctMethod};
        #showme $line
    }
}

#alias autobuf_set_preferences {
    #switch {"%2"} {
        #case {"autobuf"} { #showme yeah, set %3 to whatever.; pref_handled }
    }
}
#nop -- End Preference Management--

#alias autoBuf {

    #if {@hasAffect{haste} < 1} {
        #switch {"$MSDP_CLASS"} {
            #case {"Wizard"} {doHasteSpell};
        }
    };

    #nop -- Affects that must exhaust completely;
    #if {@hasAffect{warcry} < 1} {doWarcry};
    #if {@hasAffect{true seeing} < 1} {doTruesee};
    #if {@hasAffect{spiritual guardian} < 1} {doSpiritGuardian};
    #if {@hasAffect{divine shield} < 1} {doDivineShield};
    #if {@hasAffect{blade barrier} < 1} {doBladeBarrier};
    #if {@hasAffect{faerie fire} < 1} {doFFire};
    #if {@hasAffect{static field} < 1} {doStaticField};
    #if {@hasAffect{grim ward} < 1} {doGrimWard};

    #nop -- Affects we can renew during the last tick;
    #if {@hasAffect{unholy aura} < 2} {doUnholyAura};
    #if {@hasAffect{shapechange} < 2} {doShapechange};
    #if {@hasAffect{sanctuary} < 2} {doSanctuary};
    #if {@hasAffect{divine armor} < 2} {doDivineArmor};
    #if {@hasAffect{vigor} < 2} {doVigor};
    #if {@hasAffect{barkskin} < 2} {doBarkskin};
    #if {@hasAffect{bless} < 2} {doBless};

    #foreach {*MSDP_AFFECTS[%*]} {tmp} {
        #if {@hasAffect{$tmp} <= 1} {
            warn autobuf $tmp at $MSDP_AFFECTS[$tmp] duration
        }
    }
}

#alias doTruesee {
    #switch {"$MSDP_CLASS"} {
        #case {"Prophet"} {queueAdd nco {true}};
        #case {"Druid"} {queueAdd nco {true}};
        #case {"Templar"} {queueAdd nco {true}};
    };
}


#alias doWarcry {
    #if { "$MSDP_CLASS" == "Barbarian" } { queueAdd any {warcry} }
}

#alias doHasteSpell {
    #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
        #if {$MSDP_MANA > 160} {queueAdd nco {haste group}}
    } {
        #if {$MSDP_MANA > 40}  {queueAdd nco {haste}}
    }
}

#alias doDivineArmor {
    #if {@autobuf_check{darmor} && ("$autodarmor" == "on"} {
        #if { ("$MSDP_CLASS" == "Templar") || ("$MSDP_CLASS" == "Prophet") } {
            #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                #if {$MSDP_MANA > 160} {queueAdd nco {darmor group}}
            } {
                #if {$MSDP_MANA > 40}  {queueAdd nco {darmor}}
            }
        }
    }
}

#alias doDivineShield {
    #if {@autobuf_check{dshield} && ("$autodshield" == "on")} {
        #switch {"$MSDP_CLASS"} {
            #case {"Templar"} {#if {$MSDP_MANA > 160} {queueAdd nco {dshield}}};
            #default {warn autobuf Divine Shield preference is on but you are class $MSDP_CLASS}
        }
    }
}

#alias doSpiritGuardian {
    #if {@autobuf_check{guardian} && ("$autoguardian" == "on"} {
        #if { ("$MSDP_CLASS" == "Templar") || ( "$MSDP_CLASS" == "Prophet") } {
            #if {$MSDP_MANA > 40}  {queueAdd nco {spirit}};
        }
    }
}
#alias doBladeBarrier {
    #if {@autobuf_check{blade barrier} && ("$autoblade" == "on")} {
        #if {"$MSDP_CLASS" == "Templar"} {
            #if {$MSDP_MANA > 40}  {queueAdd nco {blade}};
        }
    }
}

#alias doVigor {
    #if {@autobuf_check{vigor} && ("$autovigor" == "on")} {
        #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
            #if {$MSDP_MANA > 100} {queueAdd nco {vigor group}}
        } {
            #if {$MSDP_MANA > 40}  {queueAdd nco {vigor}}
        }
    }
}

#alias doBarkskin {
    #if {(@autobuf_check{barkskin}) && ("$autobark" == "on")} {
	    #switch {"$MSDP_CLASS"} {
		    #case {"Druid"} {
				#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
					#if {$MSDP_MANA > 100} {queueAdd nco {barkskin group}}
				} {
					#if {$MSDP_MANA > 40}  {queueAdd nco {barkskin}}
				}
			}
		};
	}
}

#alias doStaticField {
    #if {@autobuf_check{static field} && ("$autostatic" == "on")} {
	    #switch {"$MSDP_CLASS"} {
	    	#case {"Wizard"} {
                #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {static group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {static}}
                }
            }
	    }
	}
}

#alias doUnholyAura {
    #if {@autobuf_check{aura} && ("autoaura" == "on")} {
	    #switch {"$MSDP_CLASS"} {
	    	#case {"Dreadlord"} {
	       		#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 9) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {aura group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {aura}}
                }
	    	};
	    	#case {"Necromancer"} {
                #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 2) } {
                    #if {$MSDP_MANA > 100} {queueAdd nco {aura group}}
                } {
                    #if {$MSDP_MANA > 40}  {queueAdd nco {aura}}
                }
            }
	    }
    } 
}

#alias doGrimWard {
	#switch {"$MSDP_CLASS"} {
		#case {"Necromancer"} {
			#if { ("$autogrim" == "on") } {
                #if { @autobuf_check } {
				    #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 2) } {
				    	#if {$MSDP_MANA > 100} {queueAdd nco {grimw group}}
				    } {
				    	#if {$MSDP_MANA > 40}  {queueAdd nco {grimw}}
				    }
                }
			}
        }
	}
}

#alias doFFire {#switch {"$MSDP_CLASS"} {
		#case {"Druid"} {
			#if { (@epoch{} - $lastFFire < $ffireDelay) } { #return 1 } {#var lastFFire @epoch{}};
				#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
					#if {$MSDP_MANA > 100} {queueAdd nco {ffire group}}
				} {
					#if {$MSDP_MANA > 40}  {queueAdd nco {ffire}}
				}
		};
	}
}

#alias doSanctuary {
    #if { @autobuf_check{sanctuary}} {
        #switch {"$sanctMethod"} {
			#case {"auto"} { nco doSmartSanct };
            #case {"potion"} {queueAdd nco {sanctPotion}};
            #case {"gsanc"} {queueAdd nco {gt gsanc}};
            #case {"spell"} {doSpellSanct};
        };
    } 
}

#alias doSpellSanct {
    #if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
        #if {$MSDP_MANA > 160} {queueAdd nco {sanct group}}
    } {
        #if {$MSDP_MANA > 40}  {queueAdd nco {sanct}}
    }
}

#alias doSmartSanct {
    #switch {"$MSDP_CLASS"} {
        #case {"Prophet"} {doSpellSanct};
        #case {"Templar"} {doSpellSanct};
        #default {sanctPotion}
    }
}

#alias doBless {
	#switch {"$MSDP_CLASS"} {
		#case {"Druid"} {
			#if { (@epoch{} - $lastBless < $blessDelay) } { #return 1 } {#var lastBless @epoch{}};
			#if { ("$autobark" == "on") } {
				#if {(&MSDP_GROUP) && (&MSDP_GROUP[] > 1) } {
					#if {$MSDP_MANA > 100} {queueAdd nco {bless}}
				} {
					#if {$MSDP_MANA > 40}  {queueAdd nco {bless}}
				}
			}
		};
	}
}
#alias sanctPotion {pg purple;quaff purple};

#alias doShapechange {
    #if {"${pref_shapechange}" == "werewolf"} {
        queueAdd nco {werewolf}
    };
    #elseif {&{pref_shapechange}} {
		#switch {"$MSDP_CLASS"} {
			#case {"Druid"} {queueAdd nco {shapechange $pref_shapechange}};
			#case {"Necromancer"} {queueAdd nco {mortify $pref_shapechange}};
		};
    };
};

#function autobuf_check {
    #if {!&{autobuf_last[%1]}} {#var autobuf_last[%1] 0};
    #if { (@epoch{} - $autobuf_delay) > $autobuf_last[%1] } {
        #var autobuf_last[%1] @epoch{};
        #return 1
    } {
        #return 0
    }
}

#class autobuf close
#nop -- vim: syntax=tt
